/*
 * Copyright 2016 aquenos GmbH.
 * Copyright 2016 Karlsruhe Institute of Technology.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * This software has been developed by aquenos GmbH on behalf of the
 * Karlsruhe Institute of Technology's Institute for Beam Physics and
 * Technology.
 *
 * This software contains code originally developed by aquenos GmbH for
 * the s7nodave EPICS device support. aquenos GmbH has relicensed the
 * affected poritions of code from the s7nodave EPICS device support
 * (originally licensed under the terms of the GNU GPL) under the terms
 * of the GNU LGPL version 3 or newer.
 */

#ifndef ANKA_MRF_EPICS_INTERRUPT_RECORD_ADDRESS_H
#define ANKA_MRF_EPICS_INTERRUPT_RECORD_ADDRESS_H

#include <cstdint>
#include <string>

namespace anka {
namespace mrf {
namespace epics {

/**
 * Record address for special records that deal with interrupts generated by MRF
 * devices.
 *
 * @see MrfInterruptRecord
 */
class MrfInterruptRecordAddress {

public:

  /**
   * Creates a record address from a string. Throws an std::invalid_argument
   * exception if the address string does not specify a valid address.
   */
  MrfInterruptRecordAddress(const std::string &addressString);

  /**
   * Returns the string identifying the device.
   */
  inline const std::string &getDeviceId() const {
    return deviceId;
  }

  /**
   * Returns the interrupt flags mask. This is the mask that is applied to the
   * interrupt flags before processing an interrupt. An interrupt only triggers
   * record processing if at least one the flags that is present in the mask is
   * also present in the interrupt flags. Bits that are not present in the mask
   * are set to zero in the interrupt flags before writing the value to the
   * record. If the mask is not set explicitly, it is initialized with all bits
   * set. The mask is never zero.
   */
  inline std::uint32_t getInterruptFlagsMask() const {
    return interruptFlagsMask;
  }

private:

  std::string deviceId;
  std::uint32_t interruptFlagsMask;

};

} // namespace epics
} // namespace mrf
} // namespace anka

#endif // ANKA_MRF_EPICS_INTERRUPT_RECORD_ADDRESS_H
